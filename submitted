import numpy
from heapq import *

#use Euclidean distance
def heuristic(a, goal):
    return  (a[0]-goal[0])**2 + (a[1] - goal[1])**2 


def shortest_path(graph, start, goal):                
    #print(graph.intersections)
    #print(graph.roads)
    #print (heuristic(graph.intersections[5], graph.intersections[32]))
    intersections = graph.intersections
    roads = graph.roads
    #first intersection
    next_intersection = start
    #print(intersections[goal], 'goal')
    path =[]
    path.append(start)
    visited = []
    
    # get the intersections
    while next_intersection != goal:
        
        shortest = roads[next_intersection][0]

        for i in roads[next_intersection]:
            ##check if we already visited this intersection
            if i not in visited:
                ##if not visited see which one is closest to the goal
                points = intersections[i]
                goal_points = intersections[goal]
                current_points = intersections[shortest]
    #             print(points)
    #             print(goal_points)
    #             print(current_points)
        #             # get the location for the intersections
        #            
                if heuristic(points, goal_points) < heuristic(current_points, goal_points):
                    shortest = i
                #add to the list we have visited
                visited.append(i)
        # add the shortest section to the path
        path.append(shortest)
        
#         # set it as next intersection
        next_intersection = shortest
        
    

    return path
